package ${package}.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import com.alibaba.fastjson.JSON;

import com.zhangysh.accumulate.common.constant.UtilConstant;
import com.zhangysh.accumulate.common.pojo.BsTableDataInfo;
import com.zhangysh.accumulate.back.support.service.IRedisRelatedService;
import com.zhangysh.accumulate.back.sys.base.aspect.annotation.Log;
import com.zhangysh.accumulate.back.sys.base.BaseController;
import com.zhangysh.accumulate.common.util.DateOperate;
import com.zhangysh.accumulate.common.util.HttpStorageUtil;
import com.zhangysh.accumulate.pojo.sys.dataobj.AefsysPerson;

import ${package}.dataobj.${doclassName};
import ${package}.transobj.${doclassName}Dto;
import ${package}.service.I${className}Service;

/**
 * ${tableComment}调用相关方法
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Controller
@RequestMapping("/sys/${removePrefixTableName}")
public class ${className}Controller extends BaseController{

    private static final Logger logger=LoggerFactory.getLogger(${className}Controller.class);

	@Autowired
	private I${className}Service ${classname}Service;
	@Autowired
    private IRedisRelatedService redisRelatedService;
    
	/****
	 * 获取展示${tableComment}信息列表
	 * @param request 请求对象
	 * @param ${doclassname}Dto 分页和查询对象
	 * @return 获取到的${tableComment}对象集合JSON
	 ****/
	@RequestMapping(value="/list",method = RequestMethod.POST)
	@ResponseBody
	public String getList(HttpServletRequest request,@RequestBody ${doclassName}Dto ${classname}Dto) {
		logger.info("getList分页信息:当前{}页，每页{}条",${classname}Dto.getPageInfo().getPageNum(),${classname}Dto.getPageInfo().getPageSize());
		BsTableDataInfo tableInfo=${classname}Service.listPage${className}(${classname}Dto.getPageInfo(),${classname}Dto.get${className}());
		return JSON.toJSONStringWithDateFormat(tableInfo,UtilConstant.NORMAL_MIDDLE_DATE);
	}
	
	/****
	 * 获取展示单个${tableComment},以便修改
	 * @param request 请求对象
     * @param ${primaryKey.attrname} ${tableComment}主键ID
     * @return ${tableComment}信息
	 ****/
	@RequestMapping(value="/single",method = RequestMethod.POST)
    @ResponseBody
	public String getSingle(HttpServletRequest request,@RequestBody ${primaryKey.attrType} ${primaryKey.attrname}) {
		logger.info("getSingle${tableComment}主键信息:{}",${primaryKey.attrname});
		return JSON.toJSONStringWithDateFormat(${classname}Service.get${className}ById(${primaryKey.attrname}),UtilConstant.NORMAL_MIDDLE_DATE);
	}

#foreach($column in $columns)
#if(${column.onlyCheckColumn})
	/****
	 * 验证${tableComment}${column.columnComment}唯一性
	 * @param request 请求对象
	 * @param ${classname} 要验证的对象内含${column.columnComment}属性和id,id为了排除自己
	 ***/
	@RequestMapping(value = "/check_${column.columnName}_unique",method = RequestMethod.POST)
	@ResponseBody
	public String check${column.attrName}Unique(HttpServletRequest request,@RequestBody ${doclassName} ${classname}) {
		return toUniqueResultStr(${classname}Service.check${column.attrName}Unique(${classname}).size());
	}
#end
#end
	/****
	 * 保存新增和修改的${tableComment}信息 
	 * @param request 请求对象
	 * @param ${classname} 保存的对象
	 ****/
	@RequestMapping(value="/save",method = RequestMethod.POST)
    @ResponseBody
	public String save${className}(HttpServletRequest request,@RequestBody ${doclassName} ${classname}) {
		String aerfatoken=HttpStorageUtil.getToken(request); 
		AefsysPerson operPerson=redisRelatedService.getRedisSessionPersonByToken(aerfatoken);
		if ( ${classname}.getId()!=null ) {//修改方法
		    ${classname}.setUpdateTime(DateOperate.getCurrentUtilDate());
			${classname}.setUpdateBy(operPerson.getPersonName());
			return toHandlerResultStr(${classname}Service.update${className}(${classname}));
		} else {//新增方法
			${classname}.setCreateTime(DateOperate.getCurrentUtilDate());
			${classname}.setCreateBy(operPerson.getPersonName());
			return toHandlerResultStr(${classname}Service.insert${className}(${classname}));
		}
	}
	
	/****
	 * 删除${tableComment}对象，可以删除多个.
	 * @param request 请求对象
	 * @param ids 要删除的${tableComment}ids,中间英文,隔开
	 ***/
	@Log(system="后台管理系统",module="管理",menu="管理",button="删除",saveParam=true)
	@RequestMapping(value = "/delete",method = RequestMethod.POST)
	@ResponseBody
	public String delete${className}ByIds(HttpServletRequest request,@RequestBody String ids) {
		return toHandlerResultStr(${classname}Service.delete${className}ByIds(ids));
	}
}
